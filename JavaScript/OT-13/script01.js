console.log("Nesse exerc√≠cio, voc√™ est√° livre para escolher os nomes para suas vari√°veis e fun√ß√µes! üòÑ");
console.log("");
// Crie uma fun√ß√£o que receba dois argumentos e retorne a soma dos mesmos.

function soma(a, b) {
  return a + b;
}

console.log("");
// Declare uma vari√°vel que receba a invoca√ß√£o da fun√ß√£o criada acima, passando dois n√∫meros quaisquer por argumento, e somando `5` ao resultado retornado da fun√ß√£o.

let resultadoSoma = soma(10, 5) + 5;

console.log("");
// Qual o valor atualizado dessa vari√°vel?

console.log("O valor atualizado da vari√°vel √© 20, pois a fun√ß√£o soma(10, 5) retorna 15, e somando 5, o resultado final √© 20.");
console.log(resultadoSoma); // 20

console.log("");
// Declare uma nova vari√°vel, sem valor.

let valorVariavel;

console.log("");
/*
Crie uma fun√ß√£o que adicione um valor √† vari√°vel criada acima, e retorne a
string:
O valor da vari√°vel agora √© VALOR.
Onde VALOR √© o novo valor da vari√°vel.
*/

function atualizarVariavel(novoValor) {
  valorVariavel = novoValor;
  return `O valor da vari√°vel agora √© ${valorVariavel}.`;
}

console.log("");
// Invoque a fun√ß√£o criada acima.

console.log(atualizarVariavel(30)); 

console.log("");
// Qual o retorno da fun√ß√£o? (Use coment√°rios de bloco).

// O valor da vari√°vel agora √© 30.

/*
Crie uma fun√ß√£o com as seguintes caracter√≠sticas:
1. A fun√ß√£o deve receber 3 argumentos;
2. Se qualquer um dos tr√™s argumentos n√£o estiverem preenchidos, a fun√ß√£o
deve retornar a string:
Preencha todos os valores corretamente!
3. O retorno da fun√ß√£o deve ser a multiplica√ß√£o dos 3 argumentos, somando
`2` ao resultado da multiplica√ß√£o.
*/

function multiplicarEAdicionar(a, b, c) {
  if (a === undefined || b === undefined || c === undefined) {
    return "Preencha todos os valores corretamente!";
  }
  return (a * b * c) + 2;
}

console.log("");
// Invoque a fun√ß√£o criada acima, passando s√≥ dois n√∫meros como argumento.

console.log(multiplicarEAdicionar(2, 3));

console.log("");
// Qual o resultado da invoca√ß√£o acima? (Use coment√°rios para mostrar o valor retornado).

// O resultado da invoca√ß√£o acima √© "Preencha todos os valores corretamente!", pois apenas dois argumentos foram passados.

// Agora invoque novamente a fun√ß√£o criada acima, mas passando todos os tr√™s argumentos necess√°rios.

console.log(multiplicarEAdicionar(2, 3, 4));

console.log("");
// Qual o resultado da invoca√ß√£o acima? (Use coment√°rios para mostrar o valor retornado).

// O resultado da invoca√ß√£o acima √© 26, pois (2 * 3 * 4) + 2 = 24 + 2 = 26.

/*
Crie uma fun√ß√£o com as seguintes caracter√≠sticas:
1. A fun√ß√£o deve receber 3 argumentos.
2. Se somente um argumento for passado, retorne o valor do argumento.
3. Se dois argumentos forem passados, retorne a soma dos dois argumentos.
4. Se todos os argumentos forem passados, retorne a soma do primeiro com o
segundo, e o resultado, dividido pelo terceiro.
5. Se nenhum argumento for passado, retorne o valor booleano `false`.
6. E ainda, se nenhuma das condi√ß√µes acima forem atendidas, retorne `null`.
*/

function manipularArgumentos(arg1, arg2, arg3) {
    if (arg1 === undefined && arg2 === undefined && arg3 === undefined) {
        return false; // Nenhum argumento passado
    } else if (arg1 !== undefined && arg2 === undefined && arg3 === undefined) {
        return arg1; // Somente um argumento passado
    } else if (arg1 !== undefined && arg2 !== undefined && arg3 === undefined) {
        return arg1 + arg2; // Dois argumentos passados
    } else if (arg1 !== undefined && arg2 !== undefined && arg3 !== undefined) {
        return (arg1 + arg2) / arg3; // Tr√™s argumentos passados
    } else {
        return null; // Nenhuma das condi√ß√µes acima atendidas
    }
}

// Invoque a fun√ß√£o acima utilizando todas as possibilidades (com nenhum argumento, com um, com dois e com tr√™s.) Coloque um coment√°rio de linha ao lado da fun√ß√£o com o resultado de cada invoca√ß√£o.

console.log(manipularArgumentos()); // false - Nenhum argumento passado
console.log(manipularArgumentos(5)); // 5 - Somente um argumento passado